## 1_Introduction_to_Back-End
1. What is a Web Browser? (Mozilla)
    - https://www.mozilla.org/en-US/firefox/browsers/what-is-a-browser/
2. Who invented the Internet? And why? (Kurzgesagt)
    - https://youtu.be/21eFwbb48sE
3. What is Cloud Computing? (Amazon)
    - https://youtu.be/mxT233EdY5c
4. Browser Engines (Wikipedia)
    - https://en.wikipedia.org/wiki/Browser_engine
5. Chrome Developer Tools Overview (Google)
    - https://developer.chrome.com/docs/devtools/overview
6. Network Fundamentals (Network Direction)
    - https://www.youtube.com/playlist?list=PLDQaRcbiSnqF5U8ffMgZzS7fq1rHUI3Q8
7. DOM (W3C)
    - https://www.w3.org/TR/WD-DOM/introduction.html
8. CSS (Mozilla)
    - https://developer.mozilla.org/en-US/docs/Learn/CSS
9. get a fresh copy of course-provided starter files in Coursera Labs:
    1. rename your original files
    2. select Lab Help and then select Get latest version
10. Other css frameworks
    - https://github.com/troxler/awesome-css-frameworks
11. React
    - https://react.dev/

</br>

## 2_Programming_in_Python
1. Common Python Data Structures (Real Python)
    - https://realpython.com/python-data-structures/
2. Python Exceptions: An Introduction (Real Python)
    - https://realpython.com/python-exceptions/
3. Reading and Writing Files in Python (Real Python)
    - https://realpython.com/read-write-files-python/
4. File Handling in Python (PyNative)
    - https://pynative.com/python/file-handling/
5. Procedural programming (indeed uk)
    - https://uk.indeed.com/career-advice/career-development/procedural-programming-language
6. Procedural and Object Oriented Programming (GeeksforGeeks)
    - https://www.geeksforgeeks.org/differences-between-procedural-and-object-oriented-programming/
7. Algorithms (GeeksforGeeks)
    - https://www.geeksforgeeks.org/fundamentals-of-algorithms/
8. Big O Notation (GeeksforGeeks)
    - https://www.geeksforgeeks.org/analysis-algorithms-big-o-analysis/
9. String Slicing in Python (GeeksforGeeks)
    - https://www.geeksforgeeks.org/string-slicing-in-python/
10. copy in Python: Deep Copy and Shallow Copy (GeeksforGeeks)
    - https://www.geeksforgeeks.org/copy-python-deep-copy-shallow-copy/
11. When to Use a List Comprehension in Python (Real Python)
    - https://realpython.com/list-comprehension-python/
12. Dictionary Comprehension in Python (freeCodeCamp)
    - https://www.freecodecamp.org/news/dictionary-comprehension-in-python-explained-with-examples/
13. Python OOPs Concepts (GeeksforGeeks)
    - https://www.geeksforgeeks.org/python-oops-concepts/
14. Object-Oriented Programming in Python 3 (Real Python)
    - https://realpython.com/python3-object-oriented-programming/
15. Method resolution order in Python Inheritance (GeeksforGeeks)
    - https://www.geeksforgeeks.org/method-resolution-order-in-python-inheritance/
16. Python super() (GeeksforGeeks)
    - https://www.geeksforgeeks.org/python-super/
17. Python super() (Real Python)
    - https://realpython.com/python-super/
18. How does Python's super() work with multiple inheritance? (stackoverflow)
    - https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance
19. Python Multiple Inheritance With super() Function (GeeksforGeeks)
    - https://www.geeksforgeeks.org/python-multiple-inheritance-with-super-function/
20. Abstract Classes in Python (GeeksforGeeks)
    - https://www.geeksforgeeks.org/abstract-classes-in-python/
21. Difference between Abstract Class and Interface in Java (GeeksforGeeks)
    - https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-java/
22. What Is the @ Symbol in Python? (GeeksforGeeks)
    - https://www.geeksforgeeks.org/what-is-the-symbol-in-python/
23. Decorators in Python  (GeeksforGeeks)
    - https://www.geeksforgeeks.org/decorators-in-python/
24. 物件導向中的介面與抽象類別是什麼 ?
    - https://medium.com/程式愛好者/物件導向中的介面與抽象類別是什麼-1199804ccc5f
25. Python 函数装饰器 (RUNOOB.COM)
    - https://www.runoob.com/w3cnote/python-func-decorators.html
26. Namespaces and Scope in Python (Real Python)
    - https://realpython.com/python-namespaces-scope/
27. 
    - https://learnpython.com/blog/python-modules-packages-libraries-frameworks/

</br>

## 3_Version_Control
1. centralized and distributed version control system (GitLab)
    - https://about.gitlab.com/topics/version-control/what-is-centralized-version-control-system/
    - https://about.gitlab.com/topics/version-control/benefits-distributed-version-control-system/
2. cheat sheets (@rstacruz) (e.g., Bash, GNU grep, and Vim)
    - https://devhints.io/
3. Git cheat sheet (GitHub)
    - https://education.github.com/git-cheat-sheet-education.pdf
4. Git patterns and anti-patterns for successful developers (Microsoft Developer)
    - https://www.youtube.com/watch?v=t_4lLR6F_yk

## 4_Additional_Resources
1. What Is a Database (Oracle)
    - https://www.oracle.com/database/what-is-database/
2. Types of Databases (Javatpoint)
    - https://www.javatpoint.com/types-of-databases
3. What is a relational database (IBM)
    - https://www.ibm.com/topics/relational-databases
4. SQL Commands | DDL, DQL, DML, DCL and TCL Commands (GeeksforGeeks)
    - https://www.geeksforgeeks.org/sql-ddl-dql-dml-dcl-tcl-commands/
5. SQL (Javatpoint)
    - https://www.javatpoint.com/dbms-sql-introduction
6. Relational database structure (IBM)
    - https://www.ibm.com/docs/en/control-desk/7.6.0?topic=design-relational-database-structure
7. SQL Data Types for MySQL, SQL Server, and MS Access (W3Schools)
    - https://www.w3schools.com/sql/sql_datatypes.asp
8. SQL Tutorial (Javatpoint)
    - https://www.javatpoint.com/sql-tutorial
9. SQL Tutorial (W3Schools)
    - https://www.w3schools.com/sql/
10. SQL Operators (W3Schools)
    - https://www.w3schools.com/sql/sql_operators.asp
11. What is a database schema? (IBM)
    - https://www.ibm.com/topics/database-schema

</br>

# 5_Django_Web_Framework
1. django views
- https://docs.djangoproject.com/en/5.1/topics/http/views/
2. django class-base views
- https://docs.djangoproject.com/en/5.1/topics/class-based-views/
3. django render
- https://docs.djangoproject.com/en/5.1/topics/http/shortcuts/#render